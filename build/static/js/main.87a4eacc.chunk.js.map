{"version":3,"sources":["component/recipeDetails.js","component/Recipe.js","component/alert.js","App.js","serviceWorker.js","index.js"],"names":["recipeDetails","ingredients","map","ingredient","key","uuidv4","className","text","weight","Recipe","recipe","useState","show","setshow","label","image","url","src","alt","href","target","rel","onClick","Alert","alert","App","query","setQuery","recipes","setRecipes","setAlert","getData","a","Axios","get","result","data","more","hits","console","log","onSubmit","e","preventDefault","type","placeholder","autoComplete","onChange","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAgBeA,G,MAdO,SAAC,GACnB,OADqC,EAAjBC,YACDC,KAAI,SAAAC,GACnB,OACI,wBAAIC,IAAKC,IAAQC,UAAU,mBACvB,wBAAIA,UAAU,mBAAmBH,EAAWI,MAC5C,wBAAID,UAAU,qBAAd,UAA0CH,EAAWK,cCatDC,EAjBD,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAAW,EACDC,oBAAS,GADR,mBACfC,EADe,KACVC,EADU,OAEeH,EAAOA,OAArCI,EAFe,EAEfA,MAAMC,EAFS,EAETA,MAAMC,EAFG,EAEHA,IAAIf,EAFD,EAECA,YACxB,OACI,6BACI,yBAAKK,UAAU,UACX,4BAAKQ,GACL,yBAAKG,IAAKF,EAAOG,IAAKJ,IACtB,uBAAGK,KAAMH,EAAKI,OAAO,SACrBC,IAAI,uBADJ,OAEF,4BAAQC,QAAS,kBAAIT,GAASD,KAA9B,cACCA,GAAQ,kBAAC,EAAD,CAAeX,YAAaA,OCLpCsB,EAPF,SAAC,GAAW,IAAVC,EAAS,EAATA,MACX,OACI,yBAAKlB,UAAU,SACZ,4BAAKkB,KCwDDC,EAvDL,WAAK,IAAD,EACWd,mBAAS,IADpB,mBACLe,EADK,KACCC,EADD,OAEgBhB,mBAAS,IAFzB,mBAELiB,EAFK,KAEGC,EAFH,OAGWlB,mBAAS,IAHpB,mBAGLa,EAHK,KAGCM,EAHD,KAMNd,EAAI,mCAAD,OAAoCU,EAApC,mBAFI,WAEJ,oBADK,sCAERK,EAAO,uCAAC,4BAAAC,EAAA,yDACD,KAARN,EADS,iCAEUO,IAAMC,IAAIlB,GAFpB,WAEHmB,EAFG,QAGEC,KAAKC,KAHP,yCAIAP,EAAS,0BAJT,OAMZD,EAAWM,EAAOC,KAAKE,MACvBC,QAAQC,IAAIL,GACZL,EAAS,KACTH,EAAS,IATG,wBAYVG,EAAS,6BAZC,4CAAD,qDA2Bb,OACE,yBAAKxB,UAAU,OACb,wBAAIgB,QAASS,GAAb,sBACA,0BAAMzB,UAAU,cAAcmC,SARnB,SAACC,GACdA,EAAEC,iBACFZ,MAOa,MAARP,GAAc,kBAAC,EAAD,CAAOA,MAAOA,IAC7B,2BAAOoB,KAAK,OACXC,YAAY,cACZC,aAAa,KACbC,SAlBQ,SAAAL,GACbf,EAASe,EAAEtB,OAAO4B,QAkBbA,MAAOtB,IAER,2BAAOkB,KAAK,SAASI,MAAM,YAG7B,yBAAK1C,UAAU,WACZsB,IAAU,IAAMA,EAAQ1B,KAAI,SAAAQ,GAAM,OAAE,kBAAC,EAAD,CAAQN,IAAKC,cAAUK,OAAQA,UC3CxDuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.87a4eacc.chunk.js","sourcesContent":["import React from 'react'\r\nimport {v4 as uuidv4} from \"uuid\"\r\nconst recipeDetails = ({ingredients}) => {\r\n    return ingredients.map(ingredient=>{\r\n        return(\r\n            <ul key={uuidv4} className=\"ingredient-list\">\r\n                <li className=\"ingredient-text\">{ingredient.text}</li>\r\n                <li className=\"ingredient-weight\">Weight-{ingredient.weight}</li>\r\n\r\n            </ul>\r\n        )\r\n    })\r\n        \r\n    \r\n}\r\n\r\nexport default recipeDetails\r\n","import React,{useState} from 'react'\r\nimport RecipeDetails from './recipeDetails';\r\n\r\n const Recipe=({recipe})=> {\r\n     const [show,setshow]=useState(false)\r\n     const {label,image,url,ingredients} =recipe.recipe;\r\n    return (\r\n        <div>\r\n            <div className=\"recipe\">\r\n                <h2>{label}</h2>\r\n                <img src={image} alt={label}/>\r\n                <a href={url} target=\"_blank\"\r\n                rel=\"noopener noreferrer\">URL</a>\r\n              <button onClick={()=>setshow(!show)}>Ingridents</button>\r\n              {show && <RecipeDetails ingredients={ingredients}/>}\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Recipe;\r\n","import React from 'react'\r\n\r\n const Alert=({alert})=>{\r\n    return (\r\n        <div className=\"alert\">\r\n           <h3>{alert}</h3> \r\n        </div>\r\n    )\r\n}\r\nexport default Alert\r\n","import React,{useState} from 'react';\nimport Axios from 'axios'\nimport {v4 as uuidv4} from 'uuid';\nimport './App.css';\nimport Recipe from './component/Recipe'\nimport Alert from './component/alert'\nconst App=()=>{\n  const [query,setQuery]=useState(\"\");\n  const [recipes,setRecipes] =useState([]);\n  const [alert,setAlert]=useState(\"\");\n  const APP_ID=\"75c0fba9\"\n  const APP_KEY=\"718c497dd14e14f7cbea51eb8f6a5a94\t\"\n  const url=`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n  const getData=async ()=>{\n    if(query!==\"\"){\n       const result=await Axios.get(url);\n       if(!result.data.more){\n         return setAlert(\"Ooops No Recipe found\")\n       }\n    setRecipes(result.data.hits)\n    console.log(result)\n    setAlert(\" \");\n    setQuery(\"\")\n    }\n    else{\n      setAlert(\"Please Enter Recipe First\")\n    }\n\n   \n  }\n  const onChange=e=>{\n    setQuery(e.target.value);\n    \n\n  }\n  const onSubmit=(e)=>{\n    e.preventDefault();\n    getData();\n\n  }\n  return(\n    <div className=\"App\">\n      <h1 onClick={getData}>Food Recipe Finder</h1>\n      <form className=\"search-form\" onSubmit={onSubmit}>\n        {alert!==\" \" &&<Alert alert={alert}/>}\n        <input type=\"text\"\n         placeholder=\"Search Food\" \n         autoComplete=\"on\" \n         onChange={onChange}\n         value={query}\n         />\n        <input type=\"submit\" value=\"Search\"></input>\n\n      </form>\n      <div className=\"recipes\">\n        {recipes!==[] && recipes.map(recipe=><Recipe key={uuidv4()} recipe={recipe}/>)}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}